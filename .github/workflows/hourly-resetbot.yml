import os
from datetime import datetime
import requests

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# ────────────────────────────────────────────────
# Чтение уроков из lessons14.txt (формат  1|Текст)
# ────────────────────────────────────────────────
def load_lessons() -> dict[int, str]:
    lessons = {}
    path = os.path.join(BASE_DIR, "lessons14.txt")
    with open(path, encoding="utf-8") as f:
        for line in f:
            if "|" not in line:
                continue
            num, text = line.strip().split("|", 1)
            try:
                lessons[int(num)] = text.strip()
            except ValueError:
                continue
    return lessons

# ────────────────────────────────────────────────
# Отправка сообщения через Telegram Bot API
# ────────────────────────────────────────────────
def send_message(chat_id: str | int, text: str) -> None:
    token = os.getenv("BOT_TOKEN")
    url   = f"https://api.telegram.org/bot{token}/sendMessage"
    resp  = requests.post(url, json={"chat_id": chat_id, "text": text})
    print(f"Sent to {chat_id}: {resp.status_code}")

# ────────────────────────────────────────────────
# Основная функция рассылки
# ────────────────────────────────────────────────
def run() -> None:
    lessons     = load_lessons()
    users_path  = os.path.join(BASE_DIR, "active_users.txt")
    if not os.path.exists(users_path):
        print("Нет active_users.txt — некому рассылать."); return

    utc_now     = datetime.utcnow()
    today       = utc_now.date()
    hour_utc    = utc_now.hour
    minute_utc  = utc_now.minute   # для отладки

    with open(users_path, encoding="utf-8") as f:
        for line in f:
            if not line.strip():
                continue
            parts = line.strip().split()
            if len(parts) < 5:
                continue                            # нет пояса → пропускаем
            chat_id, start_date, code, source, tz  = parts[:5]

            # Пояс должен быть вида +3 или -7
            if not tz.startswith(("+", "-")):
                continue
            try:
                offset = int(tz)                   # +3 → 3,  -5 → -5
            except ValueError:
                continue

            # Местный час пользователя
            local_hour = (hour_utc + offset) % 24
            if local_hour != 6:                    # нужен диапазон 06:00‑06:59
                continue

            # Вычисляем номер дня
            try:
                start_dt = datetime.strptime(start_date, "%Y-%m-%d").date()
            except ValueError:
                continue
            day_num = (today - start_dt).days + 1
            if not (1 <= day_num <= 14):
                continue                           # курс закончился

            # Шлём урок, если есть текст
            text = lessons.get(day_num)
            if text:
                msg = f"День {day_num}:\n{text}"
                send_message(chat_id, msg)

    print(f"run() finished at {utc_now:%Y-%m-%d %H:%M} UTC "
          f"(minute={minute_utc})")

# ────────────────────────────────────────────────
if __name__ == "__main__":
    run()
